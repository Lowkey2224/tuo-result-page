imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }
    - { resource: "@LokiTuoResultBundle/Resources/config/services.yml" }
    - { resource: "@LokiUserBundle/Resources/config/services.yml" }

# Put parameters here that don't need to change on each machine where the app is deployed
# http://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: en

framework:
    #esi:             ~
    translator:      { fallbacks: ["%locale%"] }
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    #serializer:      { enable_annotations: true }
    templating:
        engines: ['twig']
    default_locale:  "%locale%"
    trusted_hosts:   ~
    trusted_proxies: ~
    session:
        # http://symfony.com/doc/current/reference/configuration/framework.html#handler-id
        handler_id:  ~
        save_path:   "%kernel.root_dir%/../var/sessions/%kernel.environment%"
    fragments:       ~
    http_method_override: true
    assets: ~

# Twig Configuration
twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"

# Doctrine Configuration
doctrine:
    dbal:
        driver:   pdo_mysql
        host:     "%database_host%"
        port:     "%database_port%"
        dbname:   "%database_name%"
        user:     "%database_user%"
        password: "%database_password%"
        charset:  UTF8
        server_version: 5.6
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: "%kernel.root_dir%/data/data.db3"
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #     path:     "%database_path%"

    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true
        dql:
            string_functions:
                GROUP_CONCAT: LokiTuoResultBundle\DQL\GroupConcat

# Swiftmailer Configuration
swiftmailer:
    transport: "%mailer_transport%"
    host:      "%mailer_host%"
    username:  "%mailer_user%"
    password:  "%mailer_password%"
    spool:     { type: memory }

fos_user:
    db_driver: orm # other valid values are 'mongodb', 'couchdb' and 'propel'
    firewall_name: main
    user_class: LokiUserBundle\Entity\User
    from_email:
        address: "%mailer_user%"
        sender_name: "%mailer_user%"
    registration:
        form:
            type: LokiUserBundle\Form\Type\RegistrationType

doctrine_migrations:
    dir_name: "%kernel.root_dir%/DoctrineMigrations"
    namespace: Application\Migrations
    table_name: migration_versions
    name: Application Migrations

monolog:
    channels: ['tu_api']
    handlers:
        fin:
            # special log handler and channel for logging FIN exceptions and all score-requests
            level:    debug
            type:     stream
            path:     '%kernel.logs_dir%/tu_api.log'
            channels: ["tu_api"]

old_sound_rabbit_mq:
    connections:
        default:
            host:     'localhost'
            port:     5672
            user:     '%rabbitmq_user%'
            password: '%rabbitmq_password%'
            vhost:    '/'
            lazy:     false
            connection_timeout: 3
            read_write_timeout: 10
            keepalive: false
            heartbeat: 5
    producers:
        tu_api.battle:
            connection:       default
            exchange_options: {name: 'tu_api.battle', type: direct}
            queue_options:    {name: 'tu_api.battle'}
            service_alias:    'loki_tuo_result.tu_api.battle.producer'
        tu_api.update:
            connection:       default
            exchange_options: {name: 'tu_api.update', type: direct}
            queue_options:    {name: 'tu_api.update'}
            service_alias:    'loki_tuo_result.tu_api.battle.producer'
    consumers:
        tu_api.battle:
            connection:       default
            exchange_options: {name: 'tu_api.battle', type: direct}
            queue_options:    {name: 'tu_api.battle'}
            callback:         loki_tuo_result.tu_api.battle.consumer
        tu_api.update:
            connection:       default
            exchange_options: {name: 'tu_api.update', type: direct}
            queue_options:    {name: 'tu_api.update'}
            callback:         loki_tuo_result.tu_api.update.consumer
