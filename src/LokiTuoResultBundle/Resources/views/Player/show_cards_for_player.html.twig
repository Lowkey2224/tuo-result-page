{% extends "::base.html.twig" %}

{% block title %}Owned Cards for Player {{ player.name }}{% endblock %}

{% block body %}

    {% if canEdit %}
        <!-- Modal -->
        <div class="modal fade" id="addOwnedCardModal" tabindex="-1" role="dialog"
             aria-labelledby="addOwnedCardModalLabel">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span
                                    aria-hidden="true">&times;</span></button>
                        <h4 class="modal-title" id="addOwnedCardModalLabel">Add a single Card</h4>
                    </div>
                    <div class="modal-body ui-front">
                        <div id="jsFlash"></div>

                        {{ form_start(form) }}

                        <div class=" ui-widget form-group">
                            {{ form_row(form.card) }}
                        </div>

                        <div class="form-group">
                            {{ form_row(form.level) }}
                        </div>

                        <div class="form-group">
                            {{ form_row(form.amount) }}
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        {{ form_widget(form.submit, {'attr' : {'class': 'btn btn-success'}}) }}
                        {{ form_end(form) }}

                        {#<button type="button" class="btn btn-primary">Save changes</button>#}
                    </div>
                </div>
            </div>
        </div>
        {#  Mass add Form  #}
        <div class="modal fade" id="massAddOwnedCardModal" tabindex="-1" role="dialog"
             aria-labelledby="massAddOwnedCardModalLabel">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span
                                    aria-hidden="true">&times;</span></button>
                        <h4 class="modal-title" id="massAddOwnedCardModalLabel">Add multiple Cards</h4>
                    </div>
                    <div class="modal-body ui-front">
                        <div id="jsFlash"></div>
                        <h4>Note, that you have to Separate each Card with a new Line.</h4>
                        {{ form_start(massForm) }}

                        <div class=" ui-widget form-group">
                            {{ form_row(massForm.cards) }}
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        {{ form_widget(massForm.submit, {'attr' : {'class': 'btn btn-success'}}) }}
                        {{ form_end(massForm) }}

                        {#<button type="button" class="btn btn-primary">Save changes</button>#}
                    </div>
                </div>
            </div>
        </div>
    {% endif %}
    <div class="row" style="margin-top: 20px;">
        <div class="col-md-6 col-md-offset-3 text-center">
            <h2 style="margin-top: 0;">Owned Cards for Player {{ player.name }}</h2>
        </div>
    </div>

    <div class="panel panel-info">
        <div class="panel-heading">

            Deck for Player: <b>{{ player.name }}</b>
        </div>
        <div class="panel-body">
            <table id="deck" class="table table-striped">
                <tbody id="deck">
                {% for card in deck %}
                    <tr class="row" id="deck{{ card.id }}">
                        <td class="col-xs-9 card-name">
                            {{ card.card.name }} {% if card.level %}-{{ card.level }}{% endif %}{% if card.amountInDeck > 1 %}({{ card.amountInDeck}}){% endif %}
                        </td>
                        <td class="col-xs-3">
                            <form class="data-remote-remove-from-deck form-inline">
                                <div class="form-group pull-right">

                                    <input type="hidden" name="name" id="name" value="{{ card.card.name }}">
                                    <input type="hidden" name="level" id="level"
                                           value="{{ card.level?card.level:'null' }}">
                                    <input type="hidden" name="id" id="id" value="{{ card.id }}">
                                    <button type="submit" class="btn btn-danger btn-xs submitbutton" name="remove-card">
                                        <i class="glyphicon glyphicon-minus"></i>
                                    </button>
                                </div>
                            </form>
                        </td>
                    </tr>
                {% endfor %}
                </tbody>
            </table>
        </div>
    </div>

    <div class="panel panel-info">
        <div class="panel-heading">
            <div class="row">
                <p class="col-md-9 col-xs-9">
                    Owned Cards for Player: <b>{{ player.name }}</b>
                </p>
                <div class="col-md-3 col-xs-3">
                    <button type="button" class="pull-right btn btn-primary btn-md" data-toggle="modal"
                            data-target="#addOwnedCardModal">
                        <i class="glyphicon glyphicon-plus"></i>
                    </button>
                    <button type="button" class="pull-right btn btn-primary btn-md" data-toggle="modal"
                            data-target="#massAddOwnedCardModal">
                        <i class="glyphicon glyphicon-plus"></i>
                        <i class="glyphicon glyphicon-list-alt"></i>
                    </button>
                </div>
            </div>
        </div>
        <div class="panel-body">
            <table id="ownedCards" class="table table-striped">
                <tbody>
                {% for card in cards %}
                    <tr class="row" id="{{ card.id }}">
                        <td class="col-xs-9 card-name">
                            {{ card }}
                        </td>
                        <td class="col-xs-3">
                            <form class="data-remote-remove form-inline">
                                <div class="form-group pull-right">

                                    <input type="hidden" name="name" id="name" value="{{ card.card.name }}">
                                    <input type="hidden" name="level" id="level"
                                           value="{{ card.level?card.level:'null' }}">
                                    <input type="hidden" name="id" id="id" value="{{ card.id }}">
                                    <button type="submit" class="btn btn-success btn-xs submitbutton"
                                            name="add-to-deck">
                                        Add to Deck
                                    </button>
                                    <button type="submit" class="btn btn-danger btn-xs submitbutton" name="remove-card">
                                        <i class="glyphicon glyphicon-minus"></i>
                                    </button>
                                    <button type="submit" class="btn btn-primary btn-xs submitbutton" name="add-card">
                                        <i class="glyphicon glyphicon-plus"></i>
                                    </button>
                                </div>
                            </form>
                        </td>
                    </tr>
                {% endfor %}
                </tbody>
            </table>
        </div>
    </div>

    <div class="row" style="margin-top: 20px;">
        <div class="pull-left"><a href="{{ path("tuo.index") }}">back to overview</a></div>
    </div>
{% endblock %}

{% block javascripts %}
    <script>
        $(function () {
            var availableTags = [];
            $.get("{{ path('loki.tuo.cards.all') }}", function (data) {
                availableTags = data;
                $("#owned_card_card").autocomplete({
                    source: availableTags,
                    minLength: 3
                });
            });

            var buttonpressed;
            $('.submitbutton').click(function () {
                buttonpressed = $(this).attr('name')
            });

            // send ajax request
            $("form.data-remote").on("submit", function (e) {
                e.preventDefault();
                var $inputs = this.elements;
//                console.log("inputs", $inputs);
                var data = {
                    owned_card_card: $inputs[0].value,
                    owned_card_level: $inputs[1].value,
                    owned_card_amount: $inputs[2].value
                };
                console.log(data);
                sendAddCardRequest(data);
            });

            // send ajax request
            $("form.data-remote-remove").on("submit", function (e) {
                e.preventDefault();
                console.log(buttonpressed);
                var $inputs = this.elements;
                console.log("inputs", $inputs);
                var data = {
                    owned_card_card: $inputs[0].value,
                    owned_card_level: $inputs[1].value,
                    owned_card_amount: 1
                };

                if (buttonpressed == 'remove-card') {
                    sendRemoveCardRequest(data);
                } else if (buttonpressed == "add-to-deck") {
                    sendAddToDeckRequest(data);
                } else if (buttonpressed == 'add-card') {
                    sendAddCardRequest(data)
                }
//                console.log(data);
            });

            $("form.data-remote-remove-from-deck").on("submit", function (e) {
                e.preventDefault();
                console.log("Remove form Deck");
                var $inputs = this.elements;
                var data = {
                    owned_card_card: $inputs[0].value,
                    owned_card_level: $inputs[1].value,
                    owned_card_amount: -1
                };
                sendRemoveFromDeckRequest(data);

//                console.log(data);
            });

            function sendRemoveCardRequest(data) {
                var method = "DELETE";
                var url = "{{ path('loki.tuo.player.card.remove', {'playerId': player.id}) }}?XDEBUG_SESSION_START=PHPSTORM";
                var succCB = function (response) {
                    $('#jsFlash').append(getFlashMessage(true, response['name'], response['level'], response['amount']));
                    var id = response['id'];
                    var combinedName = getCombinedCardName(response['name'], response['level'], response['amount']);
                    if (response['amount'] > 0) {
                        console.log('UPdate');
                        changeAmountOfCardRow(id, combinedName);
                    } else {
                        console.log('Delete', id);

                        removeCardRow(id)
                    }
                };
                sendAjaxRequest(data, succCB, method, url)
            }

            function sendRemoveFromDeckRequest(data) {
                var method = "POST";
                var url = "{{ path('loki.tuo.player.card.deck.add', {'playerId': player.id}) }}?XDEBUG_SESSION_START=PHPSTORM";
                var succCB = function (response) {
//                    $('#jsFlash').append(getFlashMessage(true, response['name'], response['level'], response['amount']));
                    var combinedName = getCombinedCardName(response['name'], response['level'], response['amount']);
                    if(response['amount'] == 0) {

                        removeCardRow('deck'+response['id']);
                    }else {
                        changeAmountOfCardRow("deck"+response['id'], combinedName);

                    }
                };
                sendAjaxRequest(data, succCB, method, url)

            }

            function sendAddToDeckRequest(data) {
                var method = "POST";
                var url = "{{ path('loki.tuo.player.card.deck.add', {'playerId': player.id}) }}?XDEBUG_SESSION_START=PHPSTORM";
                var succCB = function (response) {
//                    $('#jsFlash').append(getFlashMessage(true, response['name'], response['level'], response['amount']));
                    var combinedName = getCombinedCardName(response['name'], response['level'], response['amount']);
                    addCardToDeck(response['id'], combinedName, response['amount'], response['level']);
                };
                sendAjaxRequest(data, succCB, method, url)
            }

            function sendAddCardRequest(data) {
                var succCB = function (response) {
                    $('#jsFlash').append(getFlashMessage(true, response['name'], response['level'], response['amount']));
                    var combinedName = getCombinedCardName(response['name'], response['level'], response['amount']);
                    addCardRow(response['id'], combinedName, response['amount'], response['level']);
                };
                var method = "POST";
                var url = "{{ path('loki.tuo.player.card.add', {'playerId': player.id}) }}";
                sendAjaxRequest(data, succCB, method, url)
            }

            /**
             * Sends an Ajax Request, with the given Data to the URL with its method
             * @param data Request Data
             * @param successCallback Method to be executed, if the Request is Successful
             * @param method Request method e.g. "GET"
             * @param url Url of the request
             */
            function sendAjaxRequest(data, successCallback, method, url) {
                $.ajax({
                    method: method,
                    url: url,
                    data: data,
                    error: function (response, textStatus, errorThrown) {
                        console.log("Fail Response", response);
                        console.log("Status", textStatus, " error", errorThrown);

                    },
                    success: successCallback
                });
            }

            function addCardRow(id, combinedName, amount, name, level) {
                console.log(id, combinedName, amount, name, level);
                if ($('#' + id).length != 0) {
                    changeAmountOfCardRow(id, combinedName);
                    console.log('UPdate Add');

                } else {
                    console.log("Create new Content line");
                    var text = '<tr class="row" id="' + combinedName + '">' +
                            '<td  class="col-xs-9 card-name">' +
                            combinedName +
                            '</td>' +
                            '<td class="col-xs-3">' +
                            '<form class="data-remote-remove">' +
                            '<input type="hidden" name="name" id="name" value="' + name + '">' +
                            '<input type="hidden" name="level" id="level" value="' + level + '">' +
                            '<input type="hidden" name="id" id="id" value="' + id + '">' +
                            '<button type="submit" class="pull-right btn btn-primary btn-xs">' +
                            '<i class="glyphicon glyphicon-minus"></i>' +
                            '</button>' +
                            '</form>' +
                            '</td></tr>';
                    console.log("Insert before ", id);
//                $(text).insertBefore(id);
                    $('#ownedCards').find('tbody').append(text);
                    return text;
                }

            }

            function addCardToDeck(id, combinedName, amount, name, level) {
                console.log(id, combinedName, amount, name, level);
                if ($('#deck' + id).length != 0) {
                    changeAmountOfCardRow(id, combinedName);
                    console.log('UPdate Add');

                } else {
                    console.log("Create new Content line");
                    var text = '<tr class="row" id="deck' + id + '">' +
                            '<td  class="col-xs-9 card-name">' +
                            combinedName +
                            '</td>' +
                            '<td class="col-xs-1">' +
                            '<form class="data-remote-remove-from-deck">' +
                            '<input type="hidden" name="name" id="name" value="' + name + '">' +
                            '<input type="hidden" name="level" id="level" value="' + level + '">' +
                            '<input type="hidden" name="id" id="id" value="' + id + '">' +
                            '<button type="submit" class="pull-right btn btn-danger btn-xs">' +
                            '<i class="glyphicon glyphicon-minus"></i>' +
                            '</button>' +
                            '</form>' +
                            '</td></tr>';
                    console.log("Insert before ", id);
//                $(text).insertBefore(id);
                    $('#deck').find('tbody').append(text);
                    return text;
                }

            }

            function changeAmountOfCardRow(id, combinedName) {
                console.log("Changing", id);
                var td = $("#" + id + " .card-name");
                td.text(combinedName);
//                $("#" + id + " #amount").attr('value', amount);
            }

            function removeCardRow(id) {
                $('#' + id).remove();
                console.log("Remove row with id ",id);
            }

            function getCombinedCardName(name, level, amount) {
                var combinedName = name;
                combinedName += (level != null && level != 'null') ? "-" + level : "";
                combinedName += amount > 1 ? " (" + amount + ")" : "";
                return combinedName;
            }

            function getFlashMessage(successful, name, level, amount) {
                var cssClass = (successful) ? 'alert-success' : 'alert-danger';
//                var text = (overrideText) ? overrideText : "Zeiten nicht gespeichert";
//                console.log("Text", text, "Override", overrideText);
                if (successful) {
                    text = "<strong>Success: </strong>" + name + " with level " + level + " added " + amount + " times";
                }

                return '<div class="alert alert-dismissible ' + cssClass + '" role="alert">' +
                        '<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>' + text + '</div>';
            }

        });
    </script>
{% endblock %}
